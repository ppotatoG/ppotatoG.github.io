{"componentChunkName":"component---src-templates-post-template-js","path":"/ReactUseForm","result":{"data":{"mdx":{"frontmatter":{"title":"React useForm custom","slug":"ReactUseForm","date":"October 26th, 2022","author":"ppotatoG","thumbnailType":"react","image":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"React useForm custom\",\n  \"date\": \"2022-10-26T00:00:00.000Z\",\n  \"slug\": \"ReactUseForm\",\n  \"thumbnailType\": \"react\",\n  \"author\": \"ppotatoG\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\uB85C\\uADF8\\uC778 \\uD398\\uC774\\uC9C0 & \\uD68C\\uC6D0\\uAC00\\uC785 \\uD398\\uC774\\uC9C0 \\uB0B4 \\uB3D9\\uC77C \\uD3FC \\uC7AC\\uC0AC\\uC6A9\\uC744 \\uC704\\uD55C \\uCEF4\\uD3EC\\uB10C\\uD2B8\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"input value handling\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"input\"), \" \\uD558\\uB2E8\\uC73C\\uB85C \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"error message\"), \" \\uB178\\uCD9C\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isUser\"), \" \\uC0AC\\uC6A9\\uC73C\\uB85C \\uB85C\\uADF8\\uC778 \\uBC84\\uD2BC \\uB178\\uCD9C\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// common/UseAuthForm.tsx\\nexport default function UseAuthForm (\\n    {\\n        email,\\n        setEmail,\\n        password,\\n        setPassword,\\n        modalIsOpen,\\n        setIsOpen,\\n        modalText,\\n        onSubmit,\\n        isUser\\n    } : any\\n){\\n    const [emailError, setEmailError] = useState<boolean>(false);\\n    const [emailErrorMessage, setEmailErrorMessage] = useState<string | ''>('');\\n\\n    const [passwordError, setPasswordError] = useState<boolean>(false);\\n    const [passwordErrorMessage, setPasswordErrorMessage] = useState<string | ''>('');\\n\\n    // input value handling\\n    const onChangeEmailCheck = (e: React.ChangeEvent<HTMLInputElement>) => {\\n        const {name, value} = e.target;\\n\\n        setEmail(value);\\n        setEmailErrorMessage(validate(name, value));\\n        setEmailError(emailErrorMessage === '');\\n    };\\n\\n    const onChangePasswordCheck = (e: React.ChangeEvent<HTMLInputElement>) => {\\n        const {name, value} = e.target;\\n\\n        setPassword(value);\\n        setPasswordErrorMessage(validate(name, value));\\n        setPasswordError(passwordErrorMessage === '');\\n    };\\n\\n    const validate = (type: string, str: string): string => {\\n        if (type === 'email') {\\n            if (!str) {\\n                return '\\uC774\\uBA54\\uC77C\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694';\\n            } else if (!EmailPattern.test(str)) {\\n                return '\\uC62C\\uBC14\\uB978 \\uC774\\uBA54\\uC77C\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.';\\n            }\\n        } else if (type === 'password') {\\n            if (!str) {\\n                return '\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694';\\n            } else if (str.length < 8) {\\n                return '\\uC62C\\uBC14\\uB978 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694';\\n            }\\n        }\\n\\n        return '';\\n    };\\n\\n    return (\\n        <form className={styles.auth} onSubmit={onSubmit}>\\n            <div className={styles.auth__item}>\\n                <label htmlFor='email'>\\uC774\\uBA54\\uC77C</label>\\n                <input\\n                    type=\\\"email\\\"\\n                    name=\\\"email\\\"\\n                    id=\\\"email\\\"\\n                    required\\n                    value={email}\\n                    onChange={onChangeEmailCheck}\\n                />\\n            </div>\\n            // error message\\n            {emailErrorMessage !== '' && <p className={styles.errorMessage}>{emailErrorMessage}</p>}\\n\\n            <div className={styles.auth__item}>\\n                <label htmlFor='password'>\\uBE44\\uBC00\\uBC88\\uD638</label>\\n                <input\\n                    type=\\\"password\\\"\\n                    name=\\\"password\\\"\\n                    id=\\\"password\\\"\\n                    required\\n                    value={password}\\n                    onChange={onChangePasswordCheck}\\n                />\\n            </div>\\n            // error message\\n            {passwordErrorMessage && <p className={styles.errorMessage}>{passwordErrorMessage}</p>}\\n\\n            <div className={styles.btn_wrap}>\\n                // \\uD68C\\uC6D0\\uAC00\\uC785 \\uD398\\uC774\\uC9C0\\uC5D0\\uC11C \\uB85C\\uADF8\\uC778 \\uBC84\\uD2BC \\uBBF8\\uB178\\uCD9C\\n                {\\n                    isUser &&\\n                    <button\\n                        disabled={!emailError || !passwordError}\\n                        className={styles.btn_wrap__item}>\\n                        \\uB85C\\uADF8\\uC778\\n                    </button>\\n                }\\n                <a className={styles.btn_wrap__item} href=\\\"../auth/SignUp\\\">\\uD68C\\uC6D0\\uAC00\\uC785</a>\\n            </div>\\n\\n            {\\n                modalIsOpen &&\\n                <CustomModal\\n                    text={modalText}\\n                    modalIsOpen={modalIsOpen}\\n                    setIsOpen={setIsOpen}\\n                />\\n            }\\n        </form>\\n    )\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// SignUp.tsx\\n\\nconst SignUp: React.FC = () => {\\n    const [email, setEmail] = useState<string>('');\\n    const [password, setPassword] = useState<string>('');\\n    const [modalIsOpen, setIsOpen] = useState<boolean>(false);\\n    const [modalText, setModalText] = useState<string>('');\\n\\n    const modalOpen = (text : string) => {\\n        setIsOpen(true);\\n        setModalText(text);\\n    }\\n\\n    const onSubmit = async (e: React.FormEvent<HTMLFormElement>): Promise<void> => {\\n        e.preventDefault();\\n\\n        axios.post('http://localhost:8080/users/create', {\\n            email: email,\\n            password: password\\n        }).then( response => {\\n            console.log(response)\\n            modalOpen(response.data.message);\\n        }).catch( error => {\\n            console.log(error)\\n            modalOpen(error.response.data.details);\\n        })\\n    }\\n\\n    return (\\n        <UseAuthForm\\n            email={email}\\n            setEmail={setEmail}\\n            password={password}\\n            setPassword={setPassword}\\n            modalIsOpen={modalIsOpen}\\n            setIsOpen={setIsOpen}\\n            onSubmit={onSubmit}\\n            modalText={modalText}\\n            setModalText={setModalText}\\n            isUser={false}\\n        />\\n    )\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// SignIn.tsx\\nconst SignIn: React.FC = () => {\\n    const [email, setEmail] = useState<string>('');\\n    const [password, setPassword] = useState<string>('');\\n    const [modalIsOpen, setIsOpen] = useState<boolean>(false);\\n    const [modalText, setModalText] = useState<string>('');\\n\\n    const modalOpen = (text : string) => {\\n        setIsOpen(true);\\n        setModalText(text);\\n    }\\n\\n    const onSubmit = async (e: React.FormEvent<HTMLFormElement>): Promise<void> => {\\n        e.preventDefault();\\n\\n        await axios.post('http://localhost:8080/users/login', {\\n            email: email,\\n            password: password\\n        }).then((response) => {\\n            // TODO: todolist\\uB85C \\uC774\\uB3D9 (refresh)\\n            console.log(response)\\n            console.log(response.data.token)\\n            localStorage.setItem('isUser', response.data.token);\\n\\n            modalOpen(response.data.message);\\n        }).catch((error) => {\\n            console.log(error)\\n            modalOpen(error.response.data.details);\\n        })\\n    }\\n\\n    return (\\n        <UseAuthForm\\n            email={email}\\n            setEmail={setEmail}\\n            password={password}\\n            setPassword={setPassword}\\n            modalIsOpen={modalIsOpen}\\n            setIsOpen={setIsOpen}\\n            onSubmit={onSubmit}\\n            modalText={modalText}\\n            setModalText={setModalText}\\n            isUser={true}\\n        />\\n    )\\n};\\n\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ppotatoG/wanted-pre-onboarding-challenge-fe-1/blob/master/common/UseAuthForm.tsx\"\n  }, \"common/UseAuthForm.tsx\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ppotatoG/wanted-pre-onboarding-challenge-fe-1/blob/master/components/auth/SignIn.tsx\"\n  }, \"auth/SignIn.tsx\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ppotatoG/wanted-pre-onboarding-challenge-fe-1/blob/master/components/auth/SignUp.tsx\"\n  }, \"auth/SignUp.tsx\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"ReactUseForm"}},"staticQueryHashes":["228695001","3441984052"]}